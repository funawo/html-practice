{"version":3,"sources":["components/PracticeDiffBlockAndInline.js","components/Router.js","App.js","serviceWorker.js","index.js"],"names":["doc3","replace","PracticeDiffBlockAndInline","style","width","margin","marginTop","marginBottom","borderWidth","borderStyle","padding","Typography","variant","backgroundColor","border","dangerouslySetInnerHTML","__html","color","height","useStyle","makeStyles","theme","menuButton","marginRight","spacing","list","anchor","textDecoration","Router","classes","useState","open","setOpen","AppBar","position","Toolbar","IconButton","className","onClick","Menu","Drawer","onClose","to","List","ListItem","button","key","ListItemText","primary","exact","path","render","component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6cdd8a51.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst doc1 = `\r\n  &lt;div style=\"background-color: red\"&gt;box1&lt;/div&gt;<br>\r\n  &lt;div style=\"background-color: blue\"&gt;box2&lt;/div&gt;<br>\r\n  &lt;div style=\"background-color: yellow\"&gt;box3&lt;/div&gt;\r\n`;\r\n\r\nconst doc2 = `\r\n  &lt;div style=\"background-color: red; width: 100; height: 100 \"&gt;box1&lt;/div&gt;<br>\r\n  &lt;div style=\"background-color: blue; width: 100; height: 100 \"&gt;box2&lt;/div&gt;<br>\r\n  &lt;div style=\"background-color: yellow; width: 100; height: 100 \"&gt;box3&lt;/div&gt;\r\n`;\r\n\r\nconst doc3 = `\r\n  この文字は<span style=\"color: red\">赤色</span>になります。\r\n`.replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n\r\nconst PracticeDiffBlockAndInline = () => {\r\n\r\n  return (\r\n    <div style={{ width: 1180, margin: 'auto', marginTop: '10px', marginBottom: '10px', borderWidth: '1px', borderStyle: 'solid', padding: '5px' }}>\r\n      <div style={{ marginTop: 10 }}>\r\n        <Typography variant=\"h5\">ブロックレベル要素</Typography>\r\n        <Typography variant=\"h6\">div</Typography>\r\n        <Typography>ブロックレベルであるdivは行全体に広がり１つのブロックとして扱われる</Typography>\r\n        <div style={{ backgroundColor: 'red' }}>box1</div>\r\n        <div style={{ backgroundColor: 'blue' }}>box2</div>\r\n        <div style={{ backgroundColor: 'yellow' }}>box3</div>\r\n        <div style={{ border: 'solid #CCCCCC', marginTop: 10 }} dangerouslySetInnerHTML={{ __html: doc1 }} />\r\n      </div>\r\n      <div style={{ marginTop: 10 }}>\r\n        <Typography variant=\"h6\">divでサイズを指定した場合</Typography>\r\n        <Typography>widthとheightで幅、高さを指定。divなどのブロックレベルは終了タグのあとに必ず改行が入る</Typography>\r\n        <Typography style={{ color: 'red' }}>回り込みを指定しない限りdivは必ず改行される</Typography>\r\n        <div style={{ backgroundColor: 'red', width: 100, height: 100 }}>\r\n          box1\r\n        </div>\r\n        <div style={{ backgroundColor: 'blue', width: 100, height: 100 }}>box2</div>\r\n        <div style={{ backgroundColor: 'yellow', width: 100, height: 100 }}>box3</div>\r\n        <div style={{ border: 'solid #CCCCCC', marginTop: 10 }} dangerouslySetInnerHTML={{ __html: doc2 }} />\r\n      </div>\r\n      <div style={{ marginTop: 10 }}>\r\n        <Typography variant=\"h5\">インライン要素</Typography>\r\n        <Typography variant=\"h6\">span</Typography>\r\n        <Typography>spanは単体では意味を持たないが、&lt;span&gt;～&lt;/span&gt;で囲った部分をインライン要素としてグループ化することができるタグ。</Typography>\r\n        <Typography>spanはインライン要素で文章の一部として利用されるので、前後に改行が入らない。</Typography>\r\n        <Typography>\r\n          この文字は<span style={{ color: 'red' }}>赤色</span>になります。\r\n        </Typography>\r\n        <div style={{ border: 'solid #CCCCCC', marginTop: 10 }} dangerouslySetInnerHTML={{ __html: doc3 }} />\r\n      </div>\r\n      <div style={{ marginTop: 10 }}>\r\n        <Typography variant=\"h5\">インライン要素のルール</Typography>\r\n        <ul>\r\n          <li>width、heightは無視される</li>\r\n          <li>左右のmargin、paddingは<span style={{ color: 'red' }}>適用</span>される</li>\r\n          <li>上下のmargin、paddingは<span style={{ color: 'red' }}>無視</span>される</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PracticeDiffBlockAndInline;","import React, { useState } from 'react';\r\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  makeStyles,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\n\r\n// Page\r\nimport PracticeDiffBlockAndInline from './PracticeDiffBlockAndInline';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  list: {\r\n    width: 250\r\n  },\r\n  anchor: {\r\n    color: '#000000',\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nconst Router = () => {\r\n  const classes = useStyle();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton className={classes.menuButton} onClick={() => { setOpen(true) }}>\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography>HTML練習</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer open={open} onClose={() => setOpen(false)}>\r\n        <div className={classes.list} onClick={() => setOpen(false)}>\r\n          <Link to=\"/practice-1\" className={classes.anchor}>\r\n            <List>\r\n              <ListItem button key={'practice-1'}>\r\n                <ListItemText primary={'ブロックレベルとインライン要素'} />\r\n              </ListItem>\r\n            </List>\r\n          </Link>\r\n        </div>\r\n      </Drawer>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => (<div>fuanwo</div>)} />\r\n        <Route exact path=\"/practice-1\" component={PracticeDiffBlockAndInline} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import React from 'react';\nimport './App.css';\n\nimport Router from './components/Router';\n\nfunction App() {\n  return (\n    <Router />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}